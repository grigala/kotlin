package

public fun test(): kotlin.Unit
public infix fun Example.toExt(/*0*/ other: Example): Pair<Example, Example>
public fun Example.toExtNonInfix(/*0*/ other: Example): Pair<Example, Example>
public fun Example.withLambda(/*0*/ f: () -> kotlin.Unit): Pair<Example, () -> kotlin.Unit>

public final class Example {
    public constructor Example()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final infix fun to(/*0*/ other: Example): Pair<Example, Example>
    public final fun toNonInfix(/*0*/ other: Example): Pair<Example, Example>
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Pair</*0*/ out A, /*1*/ out B> {
    public constructor Pair</*0*/ out A, /*1*/ out B>(/*0*/ first: A, /*1*/ second: B)
    public final val first: A
    public final val second: B
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
